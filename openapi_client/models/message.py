# coding: utf-8

"""
    Chat API SDK

    The SDK allows you to receive and send messages through your WhatsApp account. [Sign up now](https://app.chat-api.com/)  The Chat API is based on the WhatsApp WEB protocol and excludes the ban both when using libraries from mgp25 and the like. Despite this, your account can be banned by anti-spam system WhatsApp after several clicking the \"block\" button.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: sale@chat-api.com
    Generated by: https://openapi-generator.tech
"""


import pprint  # noqa: F401
import re  # noqa: F401

import six  # noqa: F401

from openapi_client.exceptions import ApiValueError  # noqa: F401
from openapi_client.model_utils import (  # noqa: F401
    ModelNormal,
    ModelSimple,
    check_allowed_values,
    check_validations
)


class Message(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      openapi_types (dict): The key is attribute name
          and the value is attribute type.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
    """

    allowed_values = {
        ('type',): {
            'CHAT': "chat",
            'IMAGE': "image",
            'PTT': "ptt",
            'DOCUMENT': "document",
            'AUDIO': "audio",
            'VIDEO': "video",
            'LOCATION': "location",
            'CALL_LOG': "call_log"
        },
    }

    attribute_map = {
        'id': 'id',  # noqa: E501
        'body': 'body',  # noqa: E501
        'type': 'type',  # noqa: E501
        'sender_name': 'senderName',  # noqa: E501
        'from_me': 'fromMe',  # noqa: E501
        'author': 'author',  # noqa: E501
        'time': 'time',  # noqa: E501
        'chat_id': 'chatId',  # noqa: E501
        'message_number': 'messageNumber'  # noqa: E501
    }

    openapi_types = {
        'id': 'str',
        'body': 'str',
        'type': 'str',
        'sender_name': 'str',
        'from_me': 'bool',
        'author': 'str',
        'time': 'int',
        'chat_id': 'str',
        'message_number': 'int'
    }

    validations = {
    }

    def __init__(self, id=None, body=None, type=None, sender_name=None, from_me=None, author=None, time=None, chat_id=None, message_number=None):  # noqa: E501
        """Message - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._body = None
        self._type = None
        self._sender_name = None
        self._from_me = None
        self._author = None
        self._time = None
        self._chat_id = None
        self._message_number = None
        self.discriminator = None

        if id is not None:
            self.id = (
                id
            )
        if body is not None:
            self.body = (
                body
            )
        if type is not None:
            self.type = (
                type
            )
        if sender_name is not None:
            self.sender_name = (
                sender_name
            )
        if from_me is not None:
            self.from_me = (
                from_me
            )
        if author is not None:
            self.author = (
                author
            )
        if time is not None:
            self.time = (
                time
            )
        if chat_id is not None:
            self.chat_id = (
                chat_id
            )
        if message_number is not None:
            self.message_number = (
                message_number
            )

    @property
    def id(self):
        """Gets the id of this Message.  # noqa: E501

        unique id  # noqa: E501

        :return: The id of this Message.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):  # noqa: E501
        """Sets the id of this Message.

        unique id  # noqa: E501

        :param id: The id of this Message.  # noqa: E501
        :type: str
        """

        self._id = (
            id
        )

    @property
    def body(self):
        """Gets the body of this Message.  # noqa: E501

        text message for type \"chat\", or link to download the file for \"ptt\", \"image\", \"audio\", \"video\" and \"document\", or latitude and longitude for \"location\", or message \"[Call]\" for \"call_log\"  # noqa: E501

        :return: The body of this Message.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):  # noqa: E501
        """Sets the body of this Message.

        text message for type \"chat\", or link to download the file for \"ptt\", \"image\", \"audio\", \"video\" and \"document\", or latitude and longitude for \"location\", or message \"[Call]\" for \"call_log\"  # noqa: E501

        :param body: The body of this Message.  # noqa: E501
        :type: str
        """

        self._body = (
            body
        )

    @property
    def type(self):
        """Gets the type of this Message.  # noqa: E501

        type of the message  # noqa: E501

        :return: The type of this Message.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):  # noqa: E501
        """Sets the type of this Message.

        type of the message  # noqa: E501

        :param type: The type of this Message.  # noqa: E501
        :type: str
        """
        check_allowed_values(
            self.allowed_values,
            ('type',),
            type,
            self.validations
        )

        self._type = (
            type
        )

    @property
    def sender_name(self):
        """Gets the sender_name of this Message.  # noqa: E501

        Sender name  # noqa: E501

        :return: The sender_name of this Message.  # noqa: E501
        :rtype: str
        """
        return self._sender_name

    @sender_name.setter
    def sender_name(self, sender_name):  # noqa: E501
        """Sets the sender_name of this Message.

        Sender name  # noqa: E501

        :param sender_name: The sender_name of this Message.  # noqa: E501
        :type: str
        """

        self._sender_name = (
            sender_name
        )

    @property
    def from_me(self):
        """Gets the from_me of this Message.  # noqa: E501

        true - outgoing, false - incoming  # noqa: E501

        :return: The from_me of this Message.  # noqa: E501
        :rtype: bool
        """
        return self._from_me

    @from_me.setter
    def from_me(self, from_me):  # noqa: E501
        """Sets the from_me of this Message.

        true - outgoing, false - incoming  # noqa: E501

        :param from_me: The from_me of this Message.  # noqa: E501
        :type: bool
        """

        self._from_me = (
            from_me
        )

    @property
    def author(self):
        """Gets the author of this Message.  # noqa: E501

        Author ID of the message, useful for groups  # noqa: E501

        :return: The author of this Message.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):  # noqa: E501
        """Sets the author of this Message.

        Author ID of the message, useful for groups  # noqa: E501

        :param author: The author of this Message.  # noqa: E501
        :type: str
        """

        self._author = (
            author
        )

    @property
    def time(self):
        """Gets the time of this Message.  # noqa: E501

        send time, unix timestamp  # noqa: E501

        :return: The time of this Message.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):  # noqa: E501
        """Sets the time of this Message.

        send time, unix timestamp  # noqa: E501

        :param time: The time of this Message.  # noqa: E501
        :type: int
        """

        self._time = (
            time
        )

    @property
    def chat_id(self):
        """Gets the chat_id of this Message.  # noqa: E501

        chat ID  # noqa: E501

        :return: The chat_id of this Message.  # noqa: E501
        :rtype: str
        """
        return self._chat_id

    @chat_id.setter
    def chat_id(self, chat_id):  # noqa: E501
        """Sets the chat_id of this Message.

        chat ID  # noqa: E501

        :param chat_id: The chat_id of this Message.  # noqa: E501
        :type: str
        """

        self._chat_id = (
            chat_id
        )

    @property
    def message_number(self):
        """Gets the message_number of this Message.  # noqa: E501

        sequence number of the message in the database  # noqa: E501

        :return: The message_number of this Message.  # noqa: E501
        :rtype: int
        """
        return self._message_number

    @message_number.setter
    def message_number(self, message_number):  # noqa: E501
        """Sets the message_number of this Message.

        sequence number of the message in the database  # noqa: E501

        :param message_number: The message_number of this Message.  # noqa: E501
        :type: int
        """

        self._message_number = (
            message_number
        )

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Message):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
