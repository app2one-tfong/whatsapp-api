# coding: utf-8

"""
    Chat API SDK

    The SDK allows you to receive and send messages through your WhatsApp account. [Sign up now](https://app.chat-api.com/)  The Chat API is based on the WhatsApp WEB protocol and excludes the ban both when using libraries from mgp25 and the like. Despite this, your account can be banned by anti-spam system WhatsApp after several clicking the \"block\" button.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: sale@chat-api.com
    Generated by: https://openapi-generator.tech
"""


import pprint  # noqa: F401
import re  # noqa: F401

import six  # noqa: F401

from openapi_client.exceptions import ApiValueError  # noqa: F401
from openapi_client.model_utils import (  # noqa: F401
    ModelNormal,
    ModelSimple,
    check_allowed_values,
    check_validations
)


class Settings(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      openapi_types (dict): The key is attribute name
          and the value is attribute type.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
    """

    allowed_values = {
    }

    attribute_map = {
        'webhook_url': 'webhookUrl',  # noqa: E501
        'ack_notifications_on': 'ackNotificationsOn',  # noqa: E501
        'chat_update_on': 'chatUpdateOn',  # noqa: E501
        'video_upload_on': 'videoUploadOn',  # noqa: E501
        'proxy': 'proxy',  # noqa: E501
        'guaranteed_hooks': 'guaranteedHooks',  # noqa: E501
        'ignore_old_messages': 'ignoreOldMessages',  # noqa: E501
        'process_archive': 'processArchive',  # noqa: E501
        'instance_statuses': 'instanceStatuses',  # noqa: E501
        'webhook_statuses': 'webhookStatuses',  # noqa: E501
        'status_notifications_on': 'statusNotificationsOn'  # noqa: E501
    }

    openapi_types = {
        'webhook_url': 'str',
        'ack_notifications_on': 'bool',
        'chat_update_on': 'bool',
        'video_upload_on': 'bool',
        'proxy': 'str',
        'guaranteed_hooks': 'bool',
        'ignore_old_messages': 'bool',
        'process_archive': 'bool',
        'instance_statuses': 'bool',
        'webhook_statuses': 'bool',
        'status_notifications_on': 'bool'
    }

    validations = {
    }

    def __init__(self, webhook_url=None, ack_notifications_on=None, chat_update_on=None, video_upload_on=None, proxy=None, guaranteed_hooks=None, ignore_old_messages=None, process_archive=None, instance_statuses=None, webhook_statuses=None, status_notifications_on=None):  # noqa: E501
        """Settings - a model defined in OpenAPI"""  # noqa: E501

        self._webhook_url = None
        self._ack_notifications_on = None
        self._chat_update_on = None
        self._video_upload_on = None
        self._proxy = None
        self._guaranteed_hooks = None
        self._ignore_old_messages = None
        self._process_archive = None
        self._instance_statuses = None
        self._webhook_statuses = None
        self._status_notifications_on = None
        self.discriminator = None

        self.webhook_url = webhook_url
        self.ack_notifications_on = ack_notifications_on
        self.chat_update_on = chat_update_on
        self.video_upload_on = video_upload_on
        self.proxy = proxy
        self.guaranteed_hooks = guaranteed_hooks
        self.ignore_old_messages = ignore_old_messages
        self.process_archive = process_archive
        self.instance_statuses = instance_statuses
        self.webhook_statuses = webhook_statuses
        self.status_notifications_on = status_notifications_on

    @property
    def webhook_url(self):
        """Gets the webhook_url of this Settings.  # noqa: E501


        :return: The webhook_url of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._webhook_url

    @webhook_url.setter
    def webhook_url(self, webhook_url):  # noqa: E501
        """Sets the webhook_url of this Settings.


        :param webhook_url: The webhook_url of this Settings.  # noqa: E501
        :type: str
        """

        self._webhook_url = (
            webhook_url
        )

    @property
    def ack_notifications_on(self):
        """Gets the ack_notifications_on of this Settings.  # noqa: E501


        :return: The ack_notifications_on of this Settings.  # noqa: E501
        :rtype: bool
        """
        return self._ack_notifications_on

    @ack_notifications_on.setter
    def ack_notifications_on(self, ack_notifications_on):  # noqa: E501
        """Sets the ack_notifications_on of this Settings.


        :param ack_notifications_on: The ack_notifications_on of this Settings.  # noqa: E501
        :type: bool
        """

        self._ack_notifications_on = (
            ack_notifications_on
        )

    @property
    def chat_update_on(self):
        """Gets the chat_update_on of this Settings.  # noqa: E501


        :return: The chat_update_on of this Settings.  # noqa: E501
        :rtype: bool
        """
        return self._chat_update_on

    @chat_update_on.setter
    def chat_update_on(self, chat_update_on):  # noqa: E501
        """Sets the chat_update_on of this Settings.


        :param chat_update_on: The chat_update_on of this Settings.  # noqa: E501
        :type: bool
        """

        self._chat_update_on = (
            chat_update_on
        )

    @property
    def video_upload_on(self):
        """Gets the video_upload_on of this Settings.  # noqa: E501


        :return: The video_upload_on of this Settings.  # noqa: E501
        :rtype: bool
        """
        return self._video_upload_on

    @video_upload_on.setter
    def video_upload_on(self, video_upload_on):  # noqa: E501
        """Sets the video_upload_on of this Settings.


        :param video_upload_on: The video_upload_on of this Settings.  # noqa: E501
        :type: bool
        """

        self._video_upload_on = (
            video_upload_on
        )

    @property
    def proxy(self):
        """Gets the proxy of this Settings.  # noqa: E501


        :return: The proxy of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._proxy

    @proxy.setter
    def proxy(self, proxy):  # noqa: E501
        """Sets the proxy of this Settings.


        :param proxy: The proxy of this Settings.  # noqa: E501
        :type: str
        """

        self._proxy = (
            proxy
        )

    @property
    def guaranteed_hooks(self):
        """Gets the guaranteed_hooks of this Settings.  # noqa: E501


        :return: The guaranteed_hooks of this Settings.  # noqa: E501
        :rtype: bool
        """
        return self._guaranteed_hooks

    @guaranteed_hooks.setter
    def guaranteed_hooks(self, guaranteed_hooks):  # noqa: E501
        """Sets the guaranteed_hooks of this Settings.


        :param guaranteed_hooks: The guaranteed_hooks of this Settings.  # noqa: E501
        :type: bool
        """

        self._guaranteed_hooks = (
            guaranteed_hooks
        )

    @property
    def ignore_old_messages(self):
        """Gets the ignore_old_messages of this Settings.  # noqa: E501


        :return: The ignore_old_messages of this Settings.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_old_messages

    @ignore_old_messages.setter
    def ignore_old_messages(self, ignore_old_messages):  # noqa: E501
        """Sets the ignore_old_messages of this Settings.


        :param ignore_old_messages: The ignore_old_messages of this Settings.  # noqa: E501
        :type: bool
        """

        self._ignore_old_messages = (
            ignore_old_messages
        )

    @property
    def process_archive(self):
        """Gets the process_archive of this Settings.  # noqa: E501


        :return: The process_archive of this Settings.  # noqa: E501
        :rtype: bool
        """
        return self._process_archive

    @process_archive.setter
    def process_archive(self, process_archive):  # noqa: E501
        """Sets the process_archive of this Settings.


        :param process_archive: The process_archive of this Settings.  # noqa: E501
        :type: bool
        """

        self._process_archive = (
            process_archive
        )

    @property
    def instance_statuses(self):
        """Gets the instance_statuses of this Settings.  # noqa: E501


        :return: The instance_statuses of this Settings.  # noqa: E501
        :rtype: bool
        """
        return self._instance_statuses

    @instance_statuses.setter
    def instance_statuses(self, instance_statuses):  # noqa: E501
        """Sets the instance_statuses of this Settings.


        :param instance_statuses: The instance_statuses of this Settings.  # noqa: E501
        :type: bool
        """

        self._instance_statuses = (
            instance_statuses
        )

    @property
    def webhook_statuses(self):
        """Gets the webhook_statuses of this Settings.  # noqa: E501


        :return: The webhook_statuses of this Settings.  # noqa: E501
        :rtype: bool
        """
        return self._webhook_statuses

    @webhook_statuses.setter
    def webhook_statuses(self, webhook_statuses):  # noqa: E501
        """Sets the webhook_statuses of this Settings.


        :param webhook_statuses: The webhook_statuses of this Settings.  # noqa: E501
        :type: bool
        """

        self._webhook_statuses = (
            webhook_statuses
        )

    @property
    def status_notifications_on(self):
        """Gets the status_notifications_on of this Settings.  # noqa: E501


        :return: The status_notifications_on of this Settings.  # noqa: E501
        :rtype: bool
        """
        return self._status_notifications_on

    @status_notifications_on.setter
    def status_notifications_on(self, status_notifications_on):  # noqa: E501
        """Sets the status_notifications_on of this Settings.


        :param status_notifications_on: The status_notifications_on of this Settings.  # noqa: E501
        :type: bool
        """

        self._status_notifications_on = (
            status_notifications_on
        )

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Settings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
