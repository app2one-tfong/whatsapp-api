# coding: utf-8

"""
    Chat API SDK

    The SDK allows you to receive and send messages through your WhatsApp account. [Sign up now](https://app.chat-api.com/)  The Chat API is based on the WhatsApp WEB protocol and excludes the ban both when using libraries from mgp25 and the like. Despite this, your account can be banned by anti-spam system WhatsApp after several clicking the \"block\" button.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: sale@chat-api.com
    Generated by: https://openapi-generator.tech
"""


import pprint  # noqa: F401
import re  # noqa: F401

import six  # noqa: F401

from openapi_client.exceptions import ApiValueError  # noqa: F401
from openapi_client.model_utils import (  # noqa: F401
    ModelNormal,
    ModelSimple,
    check_allowed_values,
    check_validations
)


class InstanceStatusStatusData(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      openapi_types (dict): The key is attribute name
          and the value is attribute type.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
    """

    allowed_values = {
        ('substatus',): {
            'NORMAL': "normal",
            'LOADING': "loading",
            'OFFLINE': "offline",
            'EXPIRED': "expired",
            'OPENING': "opening",
            'PAIRING': "pairing",
            'TIMEOUT': "timeout",
            'COMPUTER': "computer",
            'PHONE': "phone",
            'BATTERY_LOW_1': "battery_low_1",
            'BATTERY_LOW_2': "battery_low_2"
        },
        ('reason',): {
            'CONNECTING': "connecting",
            'SYNCING': "syncing",
            'OFFLINE': "offline",
            'PROXYBLOCK': "proxyblock",
            'CONFLICT': "conflict"
        },
    }

    attribute_map = {
        'substatus': 'substatus',  # noqa: E501
        'title': 'title',  # noqa: E501
        'msg': 'msg',  # noqa: E501
        'submsg': 'submsg',  # noqa: E501
        'actions': 'actions',  # noqa: E501
        'reason': 'reason'  # noqa: E501
    }

    openapi_types = {
        'substatus': 'str',
        'title': 'str',
        'msg': 'str',
        'submsg': 'str',
        'actions': 'InstanceStatusStatusDataActions',
        'reason': 'str'
    }

    validations = {
    }

    def __init__(self, substatus=None, title=None, msg=None, submsg=None, actions=None, reason=None):  # noqa: E501
        """InstanceStatusStatusData - a model defined in OpenAPI"""  # noqa: E501

        self._substatus = None
        self._title = None
        self._msg = None
        self._submsg = None
        self._actions = None
        self._reason = None
        self.discriminator = None

        if substatus is not None:
            self.substatus = (
                substatus
            )
        if title is not None:
            self.title = (
                title
            )
        if msg is not None:
            self.msg = (
                msg
            )
        if submsg is not None:
            self.submsg = (
                submsg
            )
        if actions is not None:
            self.actions = (
                actions
            )
        if reason is not None:
            self.reason = (
                reason
            )

    @property
    def substatus(self):
        """Gets the substatus of this InstanceStatusStatusData.  # noqa: E501

        Instance Substatus  # noqa: E501

        :return: The substatus of this InstanceStatusStatusData.  # noqa: E501
        :rtype: str
        """
        return self._substatus

    @substatus.setter
    def substatus(self, substatus):  # noqa: E501
        """Sets the substatus of this InstanceStatusStatusData.

        Instance Substatus  # noqa: E501

        :param substatus: The substatus of this InstanceStatusStatusData.  # noqa: E501
        :type: str
        """
        check_allowed_values(
            self.allowed_values,
            ('substatus',),
            substatus,
            self.validations
        )

        self._substatus = (
            substatus
        )

    @property
    def title(self):
        """Gets the title of this InstanceStatusStatusData.  # noqa: E501

        Status title in the language of the instance  # noqa: E501

        :return: The title of this InstanceStatusStatusData.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):  # noqa: E501
        """Sets the title of this InstanceStatusStatusData.

        Status title in the language of the instance  # noqa: E501

        :param title: The title of this InstanceStatusStatusData.  # noqa: E501
        :type: str
        """

        self._title = (
            title
        )

    @property
    def msg(self):
        """Gets the msg of this InstanceStatusStatusData.  # noqa: E501

        Status message in the language of the instance  # noqa: E501

        :return: The msg of this InstanceStatusStatusData.  # noqa: E501
        :rtype: str
        """
        return self._msg

    @msg.setter
    def msg(self, msg):  # noqa: E501
        """Sets the msg of this InstanceStatusStatusData.

        Status message in the language of the instance  # noqa: E501

        :param msg: The msg of this InstanceStatusStatusData.  # noqa: E501
        :type: str
        """

        self._msg = (
            msg
        )

    @property
    def submsg(self):
        """Gets the submsg of this InstanceStatusStatusData.  # noqa: E501

        Additional status message in the language of the instance  # noqa: E501

        :return: The submsg of this InstanceStatusStatusData.  # noqa: E501
        :rtype: str
        """
        return self._submsg

    @submsg.setter
    def submsg(self, submsg):  # noqa: E501
        """Sets the submsg of this InstanceStatusStatusData.

        Additional status message in the language of the instance  # noqa: E501

        :param submsg: The submsg of this InstanceStatusStatusData.  # noqa: E501
        :type: str
        """

        self._submsg = (
            submsg
        )

    @property
    def actions(self):
        """Gets the actions of this InstanceStatusStatusData.  # noqa: E501


        :return: The actions of this InstanceStatusStatusData.  # noqa: E501
        :rtype: InstanceStatusStatusDataActions
        """
        return self._actions

    @actions.setter
    def actions(self, actions):  # noqa: E501
        """Sets the actions of this InstanceStatusStatusData.


        :param actions: The actions of this InstanceStatusStatusData.  # noqa: E501
        :type: InstanceStatusStatusDataActions
        """

        self._actions = (
            actions
        )

    @property
    def reason(self):
        """Gets the reason of this InstanceStatusStatusData.  # noqa: E501

        The reason why the instance is in \"loading\" status  # noqa: E501

        :return: The reason of this InstanceStatusStatusData.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):  # noqa: E501
        """Sets the reason of this InstanceStatusStatusData.

        The reason why the instance is in \"loading\" status  # noqa: E501

        :param reason: The reason of this InstanceStatusStatusData.  # noqa: E501
        :type: str
        """
        check_allowed_values(
            self.allowed_values,
            ('reason',),
            reason,
            self.validations
        )

        self._reason = (
            reason
        )

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstanceStatusStatusData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
